# Go
# Build your Go application.
# Add steps that test, save build artifacts, deploy, and more:
# https://docs.microsoft.com/vsts/pipelines/languages/go

pool:
  vmImage: 'Ubuntu 16.04'

variables:
  GOBIN:  '$(GOPATH)/bin' # Go binaries path
  GOROOT: '/usr/local/go1.11' # Go installation path
  GOPATH: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path
  modulePath: '$(GOPATH)/src/github.com/$(build.repository.name)' # Path to the module's code
  imageName: 'ignite-apply-sql-updates-job:$(Build.BuildId)'

steps:
- script: |
    mkdir -p '$(GOBIN)'
    mkdir -p '$(GOPATH)/pkg'
    mkdir -p '$(modulePath)'
    shopt -s extglob
    mv !(gopath) '$(modulePath)'
    echo '##vso[task.prependpath]$(GOBIN)'
    echo '##vso[task.prependpath]$(GOROOT)/bin'
  displayName: 'Set up the Go workspace'

- script: |
    go version
    go get -u github.com/gorilla/mux
    go get -u github.com/gorilla/handlers
    go get -u github.com/denisenkom/go-mssqldb
    cd ./app
    go build -v .
  workingDirectory: '$(modulePath)'
  displayName: 'Get dependencies, then build'

# Docker Compose
# Build, push or run multi-container Docker applications. Task can be used with Docker or Azure Container registry.
- task: DockerCompose@0
  displayName: 'Build all containers in Test compose file'
  inputs:
    dockerComposeFile: $(modulePath)/docker-compose-test.yml
    action: Run a Docker Compose command
    dockerComposeCommand: build

- task: DockerCompose@0
  displayName: 'Start up SQL Server Container'
  inputs:
    dockerComposeFile: $(modulePath)/docker-compose-test.yml
    action: Run a Docker Compose command
    dockerComposeCommand: up -d db

- task: DockerCompose@0
  displayName: 'Apply Schema Migrations'
  inputs:
    dockerComposeFile: $(modulePath)/docker-compose-test.yml
    action: Run a Docker Compose command
    dockerComposeCommand: up migration

- task: DockerCompose@0
  displayName: 'Run Tests'
  inputs:
    dockerComposeFile: $(modulePath)/docker-compose-test.yml
    action: Run a Docker Compose command
    dockerComposeCommand: up testapp
  
- script: |
    docker build ./flyway -t $(dockerId)/$(imageName)
    docker login -u $(dockerId) -p $(dockerPassword)
    docker push $(dockerId)/ignite-apply-sql-updates-job
  workingDirectory: '$(modulePath)'
  displayName: 'Build, Login, Push SQL Kuberentes Job'